{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "mlp-red-wine-quality-classification.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyPbSkverMLZ/yCkGdtxDIIU",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/aaperei/data-science/blob/main/MLP%20Classification%20-%20Red%20wine%20quality%20dataset\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "W7b1XW5--cal"
      },
      "source": [
        "# Classificação utilizando Rede Neural MLP -  Qualidade Vinho Tinto Português\n",
        "\n",
        "### Alison Augusto Miranda Pereira - UNIFESP - 2021\n",
        "\n",
        "## Descrição do problema\n",
        "O presente trabalho tem o objetivo de explorar o algoritmo de classificaçao da rede MPL, por meio dos dados de qualidade do vinho tinto português. A qualidade do vinho é um atributo influenciado por alguns parâmetros físicos, químicos e sensoriais. Além disso, a qualidade é definida por um número inteiro no intervalo de 0 a 10.\n",
        "\n",
        "Para a realização da classificação, utilizou-se o algoritmo original da rede neural MLP - SGD.\n",
        "\n",
        "Os dados utilizados neste experimento estão disponíveis no site Machine Learning Repository, através do endereço [https://archive.ics.uci.edu/ml/datasets/Wine+Quality](https://archive.ics.uci.edu/ml/datasets/Wine+Quality).\n",
        "\n",
        "A seguir, vamos importar o arquivo csv refente à qualidade do vinho tinto."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "ejn5Oso0BmLL",
        "outputId": "4aeb9e75-d669-4a15-9405-446d41d131ca"
      },
      "source": [
        "# load wine red csv file\n",
        "\n",
        "import pandas as pd\n",
        "import warnings\n",
        "\n",
        "warnings.filterwarnings('ignore')\n",
        "\n",
        "# import data from csv file\n",
        "wine_dataframe = pd.read_csv('winequality-red.csv', sep=';')\n",
        "\n",
        "wine_dataframe"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fixed acidity</th>\n",
              "      <th>volatile acidity</th>\n",
              "      <th>citric acid</th>\n",
              "      <th>residual sugar</th>\n",
              "      <th>chlorides</th>\n",
              "      <th>free sulfur dioxide</th>\n",
              "      <th>total sulfur dioxide</th>\n",
              "      <th>density</th>\n",
              "      <th>pH</th>\n",
              "      <th>sulphates</th>\n",
              "      <th>alcohol</th>\n",
              "      <th>quality</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7.4</td>\n",
              "      <td>0.700</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.076</td>\n",
              "      <td>11.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>0.99780</td>\n",
              "      <td>3.51</td>\n",
              "      <td>0.56</td>\n",
              "      <td>9.4</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>7.8</td>\n",
              "      <td>0.880</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2.6</td>\n",
              "      <td>0.098</td>\n",
              "      <td>25.0</td>\n",
              "      <td>67.0</td>\n",
              "      <td>0.99680</td>\n",
              "      <td>3.20</td>\n",
              "      <td>0.68</td>\n",
              "      <td>9.8</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>7.8</td>\n",
              "      <td>0.760</td>\n",
              "      <td>0.04</td>\n",
              "      <td>2.3</td>\n",
              "      <td>0.092</td>\n",
              "      <td>15.0</td>\n",
              "      <td>54.0</td>\n",
              "      <td>0.99700</td>\n",
              "      <td>3.26</td>\n",
              "      <td>0.65</td>\n",
              "      <td>9.8</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>11.2</td>\n",
              "      <td>0.280</td>\n",
              "      <td>0.56</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.075</td>\n",
              "      <td>17.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>0.99800</td>\n",
              "      <td>3.16</td>\n",
              "      <td>0.58</td>\n",
              "      <td>9.8</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>7.4</td>\n",
              "      <td>0.700</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.076</td>\n",
              "      <td>11.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>0.99780</td>\n",
              "      <td>3.51</td>\n",
              "      <td>0.56</td>\n",
              "      <td>9.4</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1594</th>\n",
              "      <td>6.2</td>\n",
              "      <td>0.600</td>\n",
              "      <td>0.08</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.090</td>\n",
              "      <td>32.0</td>\n",
              "      <td>44.0</td>\n",
              "      <td>0.99490</td>\n",
              "      <td>3.45</td>\n",
              "      <td>0.58</td>\n",
              "      <td>10.5</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1595</th>\n",
              "      <td>5.9</td>\n",
              "      <td>0.550</td>\n",
              "      <td>0.10</td>\n",
              "      <td>2.2</td>\n",
              "      <td>0.062</td>\n",
              "      <td>39.0</td>\n",
              "      <td>51.0</td>\n",
              "      <td>0.99512</td>\n",
              "      <td>3.52</td>\n",
              "      <td>0.76</td>\n",
              "      <td>11.2</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1596</th>\n",
              "      <td>6.3</td>\n",
              "      <td>0.510</td>\n",
              "      <td>0.13</td>\n",
              "      <td>2.3</td>\n",
              "      <td>0.076</td>\n",
              "      <td>29.0</td>\n",
              "      <td>40.0</td>\n",
              "      <td>0.99574</td>\n",
              "      <td>3.42</td>\n",
              "      <td>0.75</td>\n",
              "      <td>11.0</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1597</th>\n",
              "      <td>5.9</td>\n",
              "      <td>0.645</td>\n",
              "      <td>0.12</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.075</td>\n",
              "      <td>32.0</td>\n",
              "      <td>44.0</td>\n",
              "      <td>0.99547</td>\n",
              "      <td>3.57</td>\n",
              "      <td>0.71</td>\n",
              "      <td>10.2</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1598</th>\n",
              "      <td>6.0</td>\n",
              "      <td>0.310</td>\n",
              "      <td>0.47</td>\n",
              "      <td>3.6</td>\n",
              "      <td>0.067</td>\n",
              "      <td>18.0</td>\n",
              "      <td>42.0</td>\n",
              "      <td>0.99549</td>\n",
              "      <td>3.39</td>\n",
              "      <td>0.66</td>\n",
              "      <td>11.0</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1599 rows × 12 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "      fixed acidity  volatile acidity  citric acid  ...  sulphates  alcohol  quality\n",
              "0               7.4             0.700         0.00  ...       0.56      9.4        5\n",
              "1               7.8             0.880         0.00  ...       0.68      9.8        5\n",
              "2               7.8             0.760         0.04  ...       0.65      9.8        5\n",
              "3              11.2             0.280         0.56  ...       0.58      9.8        6\n",
              "4               7.4             0.700         0.00  ...       0.56      9.4        5\n",
              "...             ...               ...          ...  ...        ...      ...      ...\n",
              "1594            6.2             0.600         0.08  ...       0.58     10.5        5\n",
              "1595            5.9             0.550         0.10  ...       0.76     11.2        6\n",
              "1596            6.3             0.510         0.13  ...       0.75     11.0        6\n",
              "1597            5.9             0.645         0.12  ...       0.71     10.2        5\n",
              "1598            6.0             0.310         0.47  ...       0.66     11.0        6\n",
              "\n",
              "[1599 rows x 12 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XAkr-c-cEkDH"
      },
      "source": [
        "## Preparação dos dados\n",
        "\n",
        "A seguir, é feito um pequeno tratamento e separação dos dados inicias em três fases: \n",
        "- Treinamento - 80%\n",
        "- Validação - 10%\n",
        "- Teste - 10%"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HRvv76oAFjA9"
      },
      "source": [
        "# Percentage used for training, validation and test\n",
        "train_perc = 0.8\n",
        "validation_perc=0.1\n",
        "test_perc = 0.1\n",
        "\n",
        "# -----------------------------------------------------------------------#\n",
        "# Split initial original dataframe in two (input and output) and convert to list format\n",
        "aux = wine_dataframe\n",
        "output_dataframe = aux['quality'].to_frame()\n",
        "input_dataframe = aux.drop(columns=['quality'])\n",
        "output_list = output_dataframe.values.tolist()\n",
        "input_list = input_dataframe.values.tolist()\n",
        "\n",
        "# -----------------------------------------------------------------------#\n",
        "# Split my data in three parts - Trainning, validation and Test\n",
        "number_of_samples = len(aux)\n",
        "index1 = int(train_perc * number_of_samples)\n",
        "index2 = int((train_perc + validation_perc) * number_of_samples)\n",
        "\n",
        "input_train = input_list[0:index1]\n",
        "input_validation = input_list[index1+1:index2]\n",
        "input_test = input_list[index2+1:]\n",
        "\n",
        "output_train = output_list[0:index1]\n",
        "output_validation = output_list[index1+1:index2]\n",
        "output_test = output_list[index2+1:]\n"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ebvSMBWZ2nvZ"
      },
      "source": [
        "## Classificação utilizando MLP Classifier\n",
        "\n",
        "Optou-se por utilizar a implementação do classificador MLP da biblioteca python `scikit-learn`. Detalhes podem ser encontrados na documentação oficial disponível em [https://scikit-learn.org/stable/modules/generated/sklearn.neural_network.MLPClassifier.html](https://scikit-learn.org/stable/modules/generated/sklearn.neural_network.MLPClassifier.html).\n",
        "\n",
        "Iremos utilizar o algoritmo `SGD`, afim de testarmos o a interferência do parâmetro `momentum` no treinamento do modelo.\n",
        "\n",
        "A seguir é demonstrado como é feito o processo de treinamento e predição da rede MPL."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iXfJpBv93Qdf",
        "outputId": "ad9577c3-7242-45ef-809b-978c9346464c"
      },
      "source": [
        "from sklearn.neural_network import MLPClassifier\n",
        "\n",
        "# Function to calculate the model accuracy\n",
        "# Sklearn also offers a default method for the same purpose: MLPClassifier.score(x, y)\n",
        "def calculate_accuracy(input, expected_output):\n",
        "  predict = clf.predict(input)\n",
        "  sample_size = len(predict)\n",
        "  success = 0\n",
        "\n",
        "  for i in range(sample_size):\n",
        "    if(predict[i] == expected_output[i]):\n",
        "      success = success + 1\n",
        "\n",
        "  return success/sample_size\n",
        "\n",
        "# -----------------------------------------------------------------------#\n",
        "# Function to initilize the SGD MLP\n",
        "def create_sgd_mlp(momentum=0.9, alpha=0.0001, hidden_layer_sizes=(5,2)):\n",
        "  return MLPClassifier(solver='sgd', alpha=alpha, hidden_layer_sizes=hidden_layer_sizes, random_state=1, momentum=momentum)\n",
        "# -----------------------------------------------------------------------#\n",
        "# Train the MLP Classifier\n",
        "clf = create_sgd_mlp()\n",
        "clf.fit(input_train, output_train)\n",
        "\n",
        "# -----------------------------------------------------------------------#\n",
        "# Validate the MLP Classifier trainning\n",
        "accuracy_test_1 = calculate_accuracy(input_validation, output_validation)\n",
        "print(\"Accuracy for validation dataset = \", accuracy_test_1*100)"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy for validation dataset =  51.57232704402516\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LDpShvGkZBiM"
      },
      "source": [
        "## Termo de momentum\n",
        "\n",
        "O termo de momentum (informado durante a criação da minha rede neural MLP) é responsável por reduzir a incidência de instabilidade durante a fase de treinamento, por gerar uma inércia na descida do vetor gradiente. É um valor entre `0` e `1`, utilizado somente quando aplicamos o algoritmo SGD.\n",
        "\n",
        "A seguinte, é demonstrado o treinamento da rede MLP para os seguintes valores de momentum: `0.1, 0.2, 0.3,  0.4, 0.5, 0.6, 0.7, 0.8, 0.9 e 1.0`. \n",
        "\n",
        "Pelos gráfico, é fácil notarmos a interferência do `momentum` na acuração do modelo gerado. Para os dados de teste, a maior acurácia foi verificado com `momentum=0.9` (valor padrão assumido pelo sklearn)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 573
        },
        "id": "5-SZKicqcFnM",
        "outputId": "c55d41a0-d238-4672-9a90-5cb5ad3b253b"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def plot_momentum(step, accuracy_momentum):\n",
        "  plt.plot(momentum_list, accuracy_momentum)\n",
        "  plt.title('Acurácia do modelo com a variação do momentum - Fase de {}'.format(step))\n",
        "  plt.xlabel('Momentum')\n",
        "  plt.ylabel('Acurácia')\n",
        "  plt.show()\n",
        "\n",
        "momentum_list = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9 , 1.0]\n",
        "range_momentum = range(len(momentum_list))\n",
        "accuracy_momentum_validation = list(range_momentum)\n",
        "accuracy_momentum_test = list(range_momentum)\n",
        "for i in range_momentum:\n",
        "  clf = create_sgd_mlp(momentum=momentum_list[i])\n",
        "  clf.fit(input_train, output_train)\n",
        "  accuracy_momentum_validation[i] = calculate_accuracy(input_validation, output_validation)*100\n",
        "  accuracy_momentum_test[i] = calculate_accuracy(input_test, output_test)*100\n",
        "\n",
        "plot_momentum(\"Validação\", accuracy_momentum_validation)\n",
        "plot_momentum(\"Teste\", accuracy_momentum_test)\n"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_90DfOU9xK60"
      },
      "source": [
        "## Variando a regulação da MPL - paramêtro alpha\n",
        "\n",
        "`Alpha` é um parâmetro para o termo de regularização, também conhecido como termo de penalidade, que combate o *overfitting*  restringindo o tamanho dos pesos. O aumento de `alfa` pode corrigir a alta variância (um sinal de *overfitting*), incentivando pesos menores, resultando em um gráfico de limite de decisão que aparece com curvaturas menores. Da mesma forma, diminuir o parâmetro `alfa` pode corrigir um *bias* alto (um sinal de *underfitting*), incentivando pesos maiores, resultando potencialmente em um limite de decisão mais complexo.\n",
        "\n",
        "***Referência: [https://scikit-learn.org/stable/auto_examples/neural_networks/plot_mlp_alpha.html](https://scikit-learn.org/stable/auto_examples/neural_networks/plot_mlp_alpha.html)***\n",
        "\n",
        "Para o problema em questão, percebemos pelos gráficos abaixo que o parâmetro  `alpha` não possui grande interferência na acúrácia do modelo. Entretanto, ao elevarmos muito o valor de `alpha` temos uma pequena e abrupta queda no valor da acurácia. Devido a esse fator, seria melhor manter o valor padrão de `alpha` (0.0001)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 573
        },
        "id": "ODiqgOCRBGml",
        "outputId": "169ce2f9-7bf7-4110-bf70-85860ef1a86c"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def plot_alpha(step, accuracy_alpha):\n",
        "  plt.plot(alpha_list, accuracy_alpha)\n",
        "  plt.title('Acurácia do modelo com a variação de alpha - Fase de {}'.format(step))\n",
        "  plt.xlabel('Alpha')\n",
        "  plt.ylabel('Acurácia')\n",
        "  plt.show()\n",
        "\n",
        "alpha_list = [0.0, 0.0001, 0.0002, 0.0003, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0 , 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]\n",
        "range_alpha = range(len(alpha_list))\n",
        "accuracy_alpha_validation = list(range_alpha)\n",
        "accuracy_alpha_test = list(range_alpha)\n",
        "for i in range_alpha:\n",
        "  clf = create_sgd_mlp(alpha=alpha_list[i])\n",
        "  clf.fit(input_train, output_train)\n",
        "  accuracy_alpha_validation[i] = calculate_accuracy(input_validation, output_validation)*100\n",
        "  accuracy_alpha_test[i] = calculate_accuracy(input_test, output_test)*100\n",
        "\n",
        "plot_alpha(\"Validação\", accuracy_alpha_validation)\n",
        "plot_alpha(\"Teste\", accuracy_alpha_test)"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7OpGGhuxL_Ru"
      },
      "source": [
        "## Variando a topologia da Rede MLP\n",
        "\n",
        "A seguir, vamos explorar diferentes topologias de rede para o problema em questão, utilizando os valores padrões de `alpha` e `momentum`.\n",
        "\n",
        "Topologias aplicadas:\n",
        "\n",
        "\n",
        "1. (5, 2)\n",
        "2. (2, 5)\n",
        "3. (2, 10)\n",
        "4. (10, 5)\n",
        "5. (5, 5)\n",
        "\n",
        "Dentre as topologias testadas, (1) e (5) foram as que apresentaram melhores resultados, conforme gráficos abaixo: "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "a9mzzVarNM2e",
        "outputId": "ab0247b9-be27-4df0-a8d2-b2779002c356"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def plot_topol(step, accuracy_topol):\n",
        "  df = pd.DataFrame({'Tolopologia':['T-1', 'T-2', 'T-3', 'T-4', 'T-5'], 'Acurácia %':accuracy_topol})\n",
        "  ax = df.plot.bar(x='Tolopologia', y='Acurácia %', rot=0)\n",
        "\n",
        "\n",
        "topol_list = [(5,2), (2, 5), (2, 10), (10, 2), (5, 5)]\n",
        "range_topol = range(len(topol_list))\n",
        "accuracy_topol_validation = list(range_topol)\n",
        "accuracy_topol_test = list(range_topol)\n",
        "\n",
        "for i in range_topol:\n",
        "  clf = create_sgd_mlp(hidden_layer_sizes=topol_list[i])\n",
        "  clf.fit(input_train, output_train)\n",
        "  accuracy_topol_validation[i] = calculate_accuracy(input_validation, output_validation)*100\n",
        "  accuracy_topol_test[i] = calculate_accuracy(input_test, output_test)*100\n",
        "\n",
        "plot_topol(\"Validação\", accuracy_topol_validation)\n",
        "plot_topol(\"Teste\", accuracy_topol_test)"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXAAAAEHCAYAAAC3Ph1GAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAATWklEQVR4nO3de5CeZXnH8e8FSQygiIQtogE3DiJKAiLLoRNEi8YJihyGjKLONjqUcDDjobWQdkoI6DBQO9220VEyjRqELtpQCINiiglaU1tw10QwBE8YhkQgIcFiDFESrv6xT5J12cOb3Xf33Tv7/cxk9nnu9zlce+fNb+48x8hMJEnlOaDRBUiSBscAl6RCGeCSVCgDXJIKZYBLUqEMcEkq1LhaFoqI9cBvgV3AzsxsiYjDga8DzcB64P2Z+Wx/2zniiCOyubl5COVK0tjT2dn5TGY29WyvKcArf5aZz3SbnwesyMwbI2JeNX91fxtobm6mo6NjH3YpSYqIx3trH8ohlPOBJdX0EuCCIWxLkrSPag3wBP4zIjojYk7VdmRmPllNPwUcWffqJEl9qvUQypmZuTEi/gS4LyIe7f5hZmZE9HpPfhX4cwCOOeaYIRUrSdqrpgDPzI3Vz00RcSdwGvB0RByVmU9GxFHApj7WXQQsAmhpafHBK1JhXnjhBTZs2MCOHTsaXcp+b+LEiUyePJnx48fXtPyAAR4RhwAHZOZvq+l3A9cDdwOzgRurn8sGXbWkUWvDhg284hWvoLm5mYhodDn7rcxky5YtbNiwgSlTptS0Ti0j8COBO6u/uHHAv2XmtyPih8A3IuIS4HHg/YOsW9IotmPHDsN7BEQEkyZNYvPmzTWvM2CAZ+ZjwEm9tG8B3rlPFUoqkuE9Mva1n70TU5KAL37xizz33HONLmOf7MuNPJJE87xv1nV76298b03L3XXXXVx44YWsW7eO448/vq41LF26lI0bN3LooYf2u9z8+fM566yzeNe73lXTdhcuXMjNN9/MMcccw1133cWECRNYtWoVd9xxB21tbUOuu7gAr/eXZzBq/cJJqp/29nbOPPNM2tvbue6664a8vZ07dzJuXFcEPv/881x//fUDrlPLMt3ddtttPPTQQ9xwww0sX76cc889l8985jO0t7cPquaePIQiadTbtm0bq1atYvHixdx+++172nft2sWnP/1ppk6dyoknnsjChQuBrsd2PPNM15M/Ojo6eMc73gHAggULaG1tZfr06bS2trJ+/Xre9ra30dbWRktLCz/4wQ/2bPumm25i2rRpnHTSScybNw+Aj3zkIyxduhToCvNTTz2VqVOnMmfOHHp7PWVm8sILL7B9+3bGjx/PrbfeyjnnnMPhhx9el34pbgQuaexZtmwZM2fO5LjjjmPSpEl0dnZyyimnsGjRItavX8+aNWsYN24cW7duHXBbjzzyCKtWreKggw5i+/bt3HfffUycOJFHH32UD3/4w3R2dnLvvfeybNkyHnjgAQ4++OBetzt37lzmz58PQGtrK/fccw/ve9/7XrLMGWecwQknnMD06dM5//zzWb58eX06BUfgkgrQ3t7OxRdfDMDFF1+85xDEd77zHS677LI9h0JqGdmed955HHTQQUDXYZSPfexjTJ8+ncsvv5xHH310z3Y/+tGPcvDBB/e53fvvv5/TTz+dadOmsXLlStauXfuSZVpbW1m9ejW33norbW1tfPzjH+fee+9l1qxZfOpTn+LFF18cRG/s5Qhc0qi2detWVq5cycMPP0xEsGvXLiKCz33uc32uM27cuD3h2PMO0kMOOWTPdFtbG01NTSxevJidO3cyceLEmmrasWMHV155JR0dHRx99NEsWLCg3ztVf/3rX/Pggw8yf/583v72t7Ny5Uo++9nPsmLFCmbMmFHTPnvjCFzSqLZ06VJaW1t5/PHHWb9+PU888QRTpkzh+9//PjNmzODmm29m586dAHsOdTQ3N9PZ2QnAHXfc0ee2n332WZqauh6z/bWvfY1du3YBMGPGDL7yla+wffv2P9rubrvD+ogjjmDbtm17jov35ZprrtlzAvT5558nIjjggAP2bH+wHIFL2icjfRVWe3s7V1/9x68auOiii2hvb2fhwoX87Gc/48QTT2T8+PFceumlzJ07l2uvvZZLLrmEa665Zs8JzN5cccUVzJo1i1tuuYWZM2fuGZ3PnDmTNWvW0NLSwoQJE3jPe97DDTfcsGe9ww47jEsvvZSpU6fy6le/mlNPPbXPfaxevRqAt771rQB86EMfYtq0aRx99NFcddVVg+0WAKK3M6fDpaWlJYf6QgcvI5RG1rp163jTm97U6DLGjN76OyI6M7Ol57IeQpGkQhngklQoA1zSgEbyUOtYtq/9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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}